{"ast":null,"code":"import _classCallCheck from \"/Users/cgreen/Desktop/bootcamp/click-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cgreen/Desktop/bootcamp/click-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cgreen/Desktop/bootcamp/click-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cgreen/Desktop/bootcamp/click-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cgreen/Desktop/bootcamp/click-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cgreen/Desktop/bootcamp/click-game/src/components/Counter.js\";\nimport React from \"react\"; // By extending the React.Component class, Counter inherits functionality from it\n//this component is called a stateful component AND a container component\n//where as the previous components we used were stateless components AND functional components\n\nvar Counter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Counter, _React$Component);\n\n  // Setting the initial state of the Counter component\n  function Counter() {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    //what function does super trigger?\n    //the parent constructor function gets triggered \n    //React.Component's constructor function\n    // you need super() here to be able to establish state in this component\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Counter).call(this)); //it's always this.state here \n\n    _this.handleIncrement = function () {\n      //and in the arrow function, this is also the class\n      //but fi we don't use the arrow function, this inside the function is the window\n      // handleIncrement(){\n      // We always use the setState method to update a component's state\n      //it's always this.setState to update the state\n      //one way   \n      // this.setState({ count: this.state.count + 1 });\n      //another way\n      var count = _this.state.count + 1; //can't do this.state.count++ because we're updating the count key in this.state directly - which we shouldn't do ever\n\n      _this.setState({\n        count: count\n      }); ///this.setState({count : count}); \n      //you can not do\n      // this.state.count = this.state.count++;\n      //NEVER DO THE ABOVE ^^^\n\n    };\n\n    _this.state = {\n      count: 0,\n      name: 'Simon'\n    }; //if you didn't use arrows for the submitBook\n    // this.handleIncrement = this.handleIncrement.bind(this);\n\n    return _this;\n  } //this is the class outside the function\n  // handleIncrement increments this.state.count by 1\n\n\n  _createClass(Counter, [{\n    key: \"render\",\n    // The render method returns the JSX that should be rendered\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"card text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-header bg-primary text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Click Counter! \", this.state.name), React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"card-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Click Count: \", this.state.count), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, this.state.count * 5), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, this.state.count / 10), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.handleIncrement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Increment\")));\n    }\n  }]);\n\n  return Counter;\n}(React.Component);\n\nexport default Counter;","map":{"version":3,"sources":["/Users/cgreen/Desktop/bootcamp/click-game/src/components/Counter.js"],"names":["React","Counter","handleIncrement","count","state","setState","name","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AAEA;AACE;;IACIC,O;;;;;AACJ;AAEA,qBAAc;AAAA;;AAAA;;AACZ;AACE;AACE;AAEJ;AACA,kFANY,CAQZ;;AARY,UAqBdC,eArBc,GAqBI,YAAM;AAEtB;AACE;AACJ;AACE;AAEA;AAEA;AACE;AAEF;AACE,UAAIC,KAAK,GAAG,MAAKC,KAAL,CAAWD,KAAX,GAAmB,CAA/B,CAboB,CAac;;AAClC,YAAKE,QAAL,CAAc;AAACF,QAAAA,KAAK,EAALA;AAAD,OAAd,EAdoB,CAgBlB;AAEJ;AACE;AAEE;;AACL,KA3Ca;;AASZ,UAAKC,KAAL,GAAa;AACXD,MAAAA,KAAK,EAAG,CADG;AAEXG,MAAAA,IAAI,EAAG;AAFI,KAAb,CATY,CAcZ;AACA;;AAfY;AAgBb,G,CAED;AAEA;;;;;AAyBA;6BACS;AACP,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACkB,KAAKF,KAAL,CAAWE,IAD7B,CADF,EAIE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAuC,KAAKF,KAAL,CAAWD,KAAlD,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKC,KAAL,CAAWD,KAAX,GAAiB,CAArB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKC,KAAL,CAAWD,KAAX,GAAiB,EAArB,CAHF,EAKE;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,OAAO,EAAE,KAAKD,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALF,CAJF,CADF;AAkBD;;;;EApEmBF,KAAK,CAACO,S;;AAuE5B,eAAeN,OAAf","sourcesContent":["import React from \"react\";\r\n\r\n// By extending the React.Component class, Counter inherits functionality from it\r\n\r\n//this component is called a stateful component AND a container component\r\n  //where as the previous components we used were stateless components AND functional components\r\nclass Counter extends React.Component {\r\n  // Setting the initial state of the Counter component\r\n\r\n  constructor() {\r\n    //what function does super trigger?\r\n      //the parent constructor function gets triggered \r\n        //React.Component's constructor function\r\n\r\n    // you need super() here to be able to establish state in this component\r\n    super();\r\n\r\n    //it's always this.state here \r\n    this.state = {\r\n      count : 0,\r\n      name : 'Simon'\r\n    };\r\n\r\n    //if you didn't use arrows for the submitBook\r\n    // this.handleIncrement = this.handleIncrement.bind(this);\r\n  }\r\n\r\n  //this is the class outside the function\r\n\r\n  // handleIncrement increments this.state.count by 1\r\n  handleIncrement = () => {\r\n\r\n    //and in the arrow function, this is also the class\r\n      //but fi we don't use the arrow function, this inside the function is the window\r\n  // handleIncrement(){\r\n    // We always use the setState method to update a component's state\r\n\r\n    //it's always this.setState to update the state\r\n\r\n    //one way   \r\n      // this.setState({ count: this.state.count + 1 });\r\n\r\n    //another way\r\n      let count = this.state.count + 1; //can't do this.state.count++ because we're updating the count key in this.state directly - which we shouldn't do ever\r\n      this.setState({count}); \r\n        \r\n        ///this.setState({count : count}); \r\n\r\n    //you can not do\r\n      // this.state.count = this.state.count++;\r\n\r\n        //NEVER DO THE ABOVE ^^^\r\n  }\r\n\r\n  // The render method returns the JSX that should be rendered\r\n  render() {\r\n    return (\r\n      <div className=\"card text-center\">\r\n        <div className=\"card-header bg-primary text-white\">\r\n          Click Counter! {this.state.name}\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <p className=\"card-text\">Click Count: {this.state.count}</p>\r\n          <p>{this.state.count*5}</p>\r\n          <p>{this.state.count/10}</p>\r\n\r\n          <button className=\"btn btn-primary\" onClick={this.handleIncrement}>\r\n            Increment\r\n          </button>\r\n\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n"]},"metadata":{},"sourceType":"module"}